


Meteor.methods({
  'deleteFile': function(_id) {
    check(_id, String);

    var upload = Uploads.findOne(_id);
    if (upload == null) {
      throw new Meteor.Error(404, 'Upload not found'); // maybe some other code
    }

    UploadServer.delete(upload.path);
    Uploads.remove(_id);
  },
  'generateSPDX': function(_id) {
    check(_id, String);
    varspdxData = '';
    var upload = Uploads.findOne(_id);
    if (upload == null) {
      throw new Meteor.Error(404, 'Upload not found'); // maybe some other code
    }
    // DoSOCSv2 Scan starts here
    pkg_to_scan = process.env.PWD + '/uploads/' + upload.name;
    //Spawn a child process for DoSCOSv2 Scan
    spawn = Npm.require('child_process').spawn;
    console.log(pkg_to_scan);
    command = spawn('dosocs2', ['oneshot', pkg_to_scan]);

    
    command.stdout.on('data',  function (data) {
        //return data;
     	console.log('stdout: ' + data);
        var tempData = data;
        console.log(tempData);
        return data;
    });
    
    // Catch Errors when talkig with DoSOCSv2
    
    // Exit code for DoSOCSv2
    command.on('exit', function (code) {
        console.log('DoSOCSv2 Exit Code: ' + code); 
    });

  }
    
})
